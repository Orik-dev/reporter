# """
# –°–µ—Ä–≤–∏—Å DeepSeek AI - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
# """
# import httpx
# from typing import List, Dict
# from loguru import logger
# from config.settings import settings


# class DeepSeekService:
#     """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å DeepSeek API"""
    
#     def __init__(self):
#         self.api_key = settings.deepseek_api_key
#         self.api_url = settings.deepseek_api_url
#         self.timeout = 60.0
    
#     async def generate_weekly_report(
#         self,
#         reports_data: List[Dict],
#         language: str = "ru"
#     ) -> str:
#         """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
#         try:
#             prompt = self._create_weekly_report_prompt(reports_data, language)
#             response_text = await self._call_deepseek_api(prompt)
#             return response_text
        
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {e}")
#             logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
#             return self._generate_fallback_report(reports_data, language)
    
#     def _create_weekly_report_prompt(
#         self,
#         reports_data: List[Dict],
#         language: str
#     ) -> str:
#         """
#         ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —á–µ—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –±–µ–∑ –≤–æ–¥—ã
#         """
        
#         reports_text = ""
#         for report in reports_data:
#             date_str = report['date'].strftime("%Y-%m-%d")
#             user_name = f"{report['first_name']} {report['last_name']}"
            
#             reports_text += f"\n{date_str} - {user_name}:\n"
#             if report['has_tasks']:
#                 reports_text += f"{report['report_text']}\n"
#             else:
#                 no_tasks_text = "–ó–∞–¥–∞—á –Ω–µ –±—ã–ª–æ" if language == "ru" else "Tap≈üƒ±rƒ±q olmayƒ±b"
#                 reports_text += f"{no_tasks_text}\n"
        
#         if language == "ru":
#             prompt = f"""–¢—ã - –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫. –°–æ–∑–¥–∞–π –ö–†–ê–¢–ö–ò–ô –∏ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.

# –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
# {reports_text}

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
# - –ù–ï–¢ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –≤–æ–¥—ã
# - –ù–ï–¢ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
# - –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã
# - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

# –°–¢–†–£–ö–¢–£–†–ê –û–¢–ß–ï–¢–ê:

# **üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ï–î–ï–õ–ò**
# - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: X
# - –û—Ç—á–µ—Ç–æ–≤ –ø–æ–¥–∞–Ω–æ: X
# - –ë–µ–∑ –∑–∞–¥–∞—á: X

# **üìÖ –ö–õ–Æ–ß–ï–í–´–ï –ó–ê–î–ê–ß–ò –ü–û –î–ù–Ø–ú**

# *–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–î–î.–ú–ú):*
# - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞
# - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 2: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞

# *–í—Ç–æ—Ä–Ω–∏–∫ (–î–î.–ú–ú):*
# - ...

# **üéØ –û–°–ù–û–í–ù–´–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–´**
# 1. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1 (X —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
#    - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   
# 2. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2 (X —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
#    - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

# –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
# - –ò—Å–ø–æ–ª—å–∑—É–π markdown (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å–ø–∏—Å–∫–∏)
# - –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏
# - –í—ã–¥–µ–ª—è–π —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã
# - –ú–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤
# - –ù–ï–¢ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑"""
#         else:
#             prompt = f"""S…ôn biznes-analitiksan. R…ôhb…ôrlik √º√ß√ºn QISA v…ô STRUKTURLA≈ûDIRILMI≈û h…ôft…ôlik hesabat yarat.

# ƒ∞LKƒ∞N M∆èLUMAT:
# {reports_text}

# KRƒ∞Tƒ∞K VACIB:
# - Giri≈ü c√ºml…ôl…ôri v…ô "su" YOX
# - Yekun n…ôtic…ôl…ôr YOX
# - YALNIZ konkret faktlar v…ô r…ôq…ôml…ôr
# - Maksimum informativlik

# HESABAT STRUKTURU:

# **üìä H∆èFT∆è STATƒ∞STƒ∞KASI**
# - ƒ∞≈ü√ßi sayƒ±: X
# - T…ôqdim olunan hesabatlar: X
# - Tap≈üƒ±rƒ±qsƒ±z: X

# **üìÖ G√úNL∆èR∆è G√ñR∆è ∆èSAS TAP≈ûIRIQLAR**

# *Bazar ert…ôsi (GG.AA):*
# - ƒ∞≈ü√ßi 1: konkret tap≈üƒ±rƒ±q
# - ƒ∞≈ü√ßi 2: konkret tap≈üƒ±rƒ±q

# *√á…ôr≈ü…ônb…ô ax≈üamƒ± (GG.AA):*
# - ...

# **üéØ ƒ∞≈ûƒ∞N ∆èSAS ƒ∞STƒ∞QAM∆èTL∆èRƒ∞**
# 1. ƒ∞stiqam…ôt 1 (X i≈ü√ßi)
#    - Konkret n…ôtic…ôl…ôr
   
# 2. ƒ∞stiqam…ôt 2 (X i≈ü√ßi)
#    - Konkret n…ôtic…ôl…ôr

# T∆èL∆èBL∆èR:
# - Markdown istifad…ô et (qalƒ±n, kursiv, siyahƒ±)
# - Ox≈üar tap≈üƒ±rƒ±qlarƒ± qrupla
# - R…ôq…ôml…ôri v…ô faktlarƒ± vurƒüula
# - Maksimum 300 s√∂z
# - M√ºc…ôrr…ôd ifad…ôl…ôr YOX"""
        
#         return prompt
    
#     async def _call_deepseek_api(self, prompt: str) -> str:
#         """–í—ã–∑–≤–∞—Ç—å DeepSeek API"""
#         headers = {
#             "Authorization": f"Bearer {self.api_key}",
#             "Content-Type": "application/json"
#         }
        
#         data = {
#             "model": "deepseek-chat",
#             "messages": [
#                 {
#                     "role": "user",
#                     "content": prompt
#                 }
#             ],
#             "temperature": 0.3,  # ‚úÖ –°–ù–ò–ñ–ï–ù–û –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
#             "max_tokens": 2000  # ‚úÖ –°–ù–ò–ñ–ï–ù–û –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
#         }
        
#         async with httpx.AsyncClient(timeout=self.timeout) as client:
#             response = await client.post(
#                 self.api_url,
#                 headers=headers,
#                 json=data
#             )
#             response.raise_for_status()
            
#             result = response.json()
#             return result['choices'][0]['message']['content']
    
#     def _generate_fallback_report(
#         self,
#         reports_data: List[Dict],
#         language: str
#     ) -> str:
#         """Fallback –æ—Ç—á–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        
#         if language == "ru":
#             report = "**üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢**\n\n"
#             report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {reports_data[0]['date'].strftime('%d.%m.%Y')} - "
#             report += f"{reports_data[-1]['date'].strftime('%d.%m.%Y')}\n"
#             report += "‚ö†Ô∏è *–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è*\n\n"
            
#             from collections import defaultdict
#             by_date = defaultdict(list)
#             for r in reports_data:
#                 by_date[r['date'].strftime('%d.%m.%Y')].append(r)
            
#             report += "**üìÖ –û–¢–ß–ï–¢–´ –ü–û –î–ù–Ø–ú:**\n\n"
#             for date, day_reports in sorted(by_date.items()):
#                 report += f"*{date}:*\n"
#                 for r in day_reports:
#                     user_name = f"{r['first_name']} {r['last_name']}"
#                     if r['has_tasks']:
#                         report += f"‚Ä¢ **{user_name}**: {r['report_text']}\n"
#                     else:
#                         report += f"‚Ä¢ **{user_name}**: –ó–∞–¥–∞—á –Ω–µ –±—ã–ª–æ\n"
#                 report += "\n"
            
#             total = len(reports_data)
#             with_tasks = sum(1 for r in reports_data if r['has_tasks'])
            
#             report += "**üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
#             report += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total}\n"
#             report += f"‚Ä¢ –° –∑–∞–¥–∞—á–∞–º–∏: {with_tasks}\n"
#             report += f"‚Ä¢ –ë–µ–∑ –∑–∞–¥–∞—á: {total - with_tasks}\n"
            
#         else:
#             report = "**üìä H∆èFT∆èLƒ∞K HESABAT**\n\n"
#             report += f"üìÖ D√∂vr: {reports_data[0]['date'].strftime('%d.%m.%Y')} - "
#             report += f"{reports_data[-1]['date'].strftime('%d.%m.%Y')}\n"
#             report += "‚ö†Ô∏è *Sad…ôl…ô≈üdirilmi≈ü versiya*\n\n"
            
#             from collections import defaultdict
#             by_date = defaultdict(list)
#             for r in reports_data:
#                 by_date[r['date'].strftime('%d.%m.%Y')].append(r)
            
#             report += "**üìÖ G√úNL∆èR∆è G√ñR∆è HESABATLAR:**\n\n"
#             for date, day_reports in sorted(by_date.items()):
#                 report += f"*{date}:*\n"
#                 for r in day_reports:
#                     user_name = f"{r['first_name']} {r['last_name']}"
#                     if r['has_tasks']:
#                         report += f"‚Ä¢ **{user_name}**: {r['report_text']}\n"
#                     else:
#                         report += f"‚Ä¢ **{user_name}**: Tap≈üƒ±rƒ±q olmayƒ±b\n"
#                 report += "\n"
            
#             total = len(reports_data)
#             with_tasks = sum(1 for r in reports_data if r['has_tasks'])
            
#             report += "**üìà STATƒ∞STƒ∞KA:**\n"
#             report += f"‚Ä¢ C…ômi hesabat: {total}\n"
#             report += f"‚Ä¢ Tap≈üƒ±rƒ±qlarla: {with_tasks}\n"
#             report += f"‚Ä¢ Tap≈üƒ±rƒ±qsƒ±z: {total - with_tasks}\n"
        
#         return report


# deepseek_service = DeepSeekService()

"""
–°–µ—Ä–≤–∏—Å DeepSeek AI - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import httpx
from typing import List, Dict
from loguru import logger
from config.settings import settings


class DeepSeekService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å DeepSeek API"""
    
    def __init__(self):
        self.api_key = settings.deepseek_api_key
        self.api_url = settings.deepseek_api_url
        self.timeout = 60.0
    
    async def generate_weekly_report(
        self,
        reports_data: List[Dict],
        language: str = "ru"
    ) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            prompt = self._create_weekly_report_prompt(reports_data, language)
            response_text = await self._call_deepseek_api(prompt)
            return response_text
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {e}")
            logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            return self._generate_fallback_report(reports_data, language)
    
    def _create_weekly_report_prompt(
        self,
        reports_data: List[Dict],
        language: str
    ) -> str:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞—Ç–∞–º
        """
        
        reports_text = ""
        for report in reports_data:
            date_str = report['date'].strftime("%Y-%m-%d")
            user_name = f"{report['first_name']} {report['last_name']}"
            
            reports_text += f"\n{date_str} - {user_name}:\n"
            if report['has_tasks']:
                reports_text += f"{report['report_text']}\n"
            else:
                no_tasks_text = "–ó–∞–¥–∞—á –Ω–µ –±—ã–ª–æ" if language == "ru" else "Tap≈üƒ±rƒ±q olmayƒ±b"
                reports_text += f"{no_tasks_text}\n"
        
        if language == "ru":
            prompt = f"""–¢—ã - –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫. –°–æ–∑–¥–∞–π –ö–†–ê–¢–ö–ò–ô –∏ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
{reports_text}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –±—ã–ª–æ
- –ì—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—Ä–æ–≥–æ –ø–æ –†–ï–ê–õ–¨–ù–´–ú –¥–∞—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–∫–∏
- –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å - —Ç–∞–∫ –∏ –ø–∏—à–∏ (–æ–¥–∏–Ω –¥–µ–Ω—å)
- –ù–ï–¢ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –≤–æ–¥—ã
- –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã

–°–¢–†–£–ö–¢–£–†–ê –û–¢–ß–ï–¢–ê:

**üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ï–î–ï–õ–ò**
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: X
- –û—Ç—á–µ—Ç–æ–≤ –ø–æ–¥–∞–Ω–æ: X
- –ë–µ–∑ –∑–∞–¥–∞—á: X

**üìÖ –û–¢–ß–ï–¢–´ –ü–û –î–ê–¢–ê–ú**

–î–ª—è –ö–ê–ñ–î–û–ô –¥–∞—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

*–î–∞—Ç–∞ (–î–î.–ú–ú):*
- **–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1**: –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ 1
- **–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 2**: –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ 2

–ï–°–õ–ò –æ—Ç—á–µ—Ç—ã –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å - –ø–æ–∫–∞–∂–∏ –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç –¥–µ–Ω—å!
–ù–ï —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –ø–æ —Ä–∞–∑–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏!

**üéØ –û–°–ù–û–í–ù–´–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–´**
–°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (frontend, backend, design –∏ —Ç.–¥.)

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π markdown (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å–ø–∏—Å–∫–∏)
- –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏
- –í—ã–¥–µ–ª—è–π —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã
- –ú–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤
- –ù–ï–¢ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        else:
            prompt = f"""S…ôn biznes-analitiksan. R…ôhb…ôrlik √º√ß√ºn QISA v…ô STRUKTURLA≈ûDIRILMI≈û h…ôft…ôlik hesabat yarat.

ƒ∞LKƒ∞N M∆èLUMAT:
{reports_text}

‚ö†Ô∏è KRƒ∞Tƒ∞K VACIB:
- YALNIZ ilkin m…ôlumatdakƒ± tarixl…ôri istifad…ô et
- Hesabat olmayan g√ºnl…ôr √º√ß√ºn m…ôlumat UYDURMAƒûA YOXDUR
- Yalnƒ±z REAL g√∂nd…ôrilm…ô tarixl…ôrin…ô g√∂r…ô qrupla
- ∆èg…ôr hesabat bir g√ºn √º√ß√ºnd√ºrs…ô - bel…ô d…ô yaz (bir g√ºn)
- Giri≈ü c√ºml…ôl…ôri v…ô "su" YOX
- YALNIZ konkret faktlar v…ô r…ôq…ôml…ôr

HESABAT STRUKTURU:

**üìä H∆èFT∆è STATƒ∞STƒ∞KASI**
- ƒ∞≈ü√ßi sayƒ±: X
- T…ôqdim olunan hesabatlar: X
- Tap≈üƒ±rƒ±qsƒ±z: X

**üìÖ TARƒ∞XL∆èR∆è G√ñR∆è HESABATLAR**

ƒ∞lkin m…ôlumatdakƒ± H∆èR tarix √º√ß√ºn:

*Tarix (GG.AA):*
- **ƒ∞≈ü√ßi 1**: i≈ü√ßi 1-in tap≈üƒ±rƒ±qlarƒ±
- **ƒ∞≈ü√ßi 2**: i≈ü√ßi 2-nin tap≈üƒ±rƒ±qlarƒ±

∆èG∆èR hesabat yalnƒ±z bir g√ºn √º√ß√ºnd√ºrs…ô - YALNIZ o g√ºn√º g√∂st…ôr!
Bir g√ºn√ºn tap≈üƒ±rƒ±qlarƒ±nƒ± m√ºxt…ôlif g√ºnl…ôr…ô payla≈üma!

**üéØ ƒ∞≈ûƒ∞N ∆èSAS ƒ∞STƒ∞QAM∆èTL∆èRƒ∞**
Ox≈üar tap≈üƒ±rƒ±qlarƒ± istiqam…ôtl…ôr…ô g√∂r…ô qrupla (frontend, backend, dizayn v…ô s.)

T∆èL∆èBL∆èR:
- Markdown istifad…ô et (qalƒ±n, kursiv, siyahƒ±)
- Ox≈üar tap≈üƒ±rƒ±qlarƒ± qrupla
- R…ôq…ôml…ôri v…ô faktlarƒ± vurƒüula
- Maksimum 300 s√∂z
- M√ºc…ôrr…ôd ifad…ôl…ôr YOX"""
        
        return prompt
    
    async def _call_deepseek_api(self, prompt: str) -> str:
        """–í—ã–∑–≤–∞—Ç—å DeepSeek API"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.3,
            "max_tokens": 2000
        }
        
        async with httpx.AsyncClient(timeout=self.timeout) as client:
            response = await client.post(
                self.api_url,
                headers=headers,
                json=data
            )
            response.raise_for_status()
            
            result = response.json()
            return result['choices'][0]['message']['content']
    
    def _generate_fallback_report(
        self,
        reports_data: List[Dict],
        language: str
    ) -> str:
        """Fallback –æ—Ç—á–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        
        if language == "ru":
            report = "**üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢**\n\n"
            report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {reports_data[0]['date'].strftime('%d.%m.%Y')} - "
            report += f"{reports_data[-1]['date'].strftime('%d.%m.%Y')}\n"
            report += "‚ö†Ô∏è *–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è*\n\n"
            
            from collections import defaultdict
            by_date = defaultdict(list)
            for r in reports_data:
                by_date[r['date'].strftime('%d.%m.%Y')].append(r)
            
            report += "**üìÖ –û–¢–ß–ï–¢–´ –ü–û –î–ê–¢–ê–ú:**\n\n"
            for date, day_reports in sorted(by_date.items()):
                report += f"*{date}:*\n"
                for r in day_reports:
                    user_name = f"{r['first_name']} {r['last_name']}"
                    if r['has_tasks']:
                        report += f"‚Ä¢ **{user_name}**: {r['report_text']}\n"
                    else:
                        report += f"‚Ä¢ **{user_name}**: –ó–∞–¥–∞—á –Ω–µ –±—ã–ª–æ\n"
                report += "\n"
            
            total = len(reports_data)
            with_tasks = sum(1 for r in reports_data if r['has_tasks'])
            
            report += "**üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
            report += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total}\n"
            report += f"‚Ä¢ –° –∑–∞–¥–∞—á–∞–º–∏: {with_tasks}\n"
            report += f"‚Ä¢ –ë–µ–∑ –∑–∞–¥–∞—á: {total - with_tasks}\n"
            
        else:
            report = "**üìä H∆èFT∆èLƒ∞K HESABAT**\n\n"
            report += f"üìÖ D√∂vr: {reports_data[0]['date'].strftime('%d.%m.%Y')} - "
            report += f"{reports_data[-1]['date'].strftime('%d.%m.%Y')}\n"
            report += "‚ö†Ô∏è *Sad…ôl…ô≈üdirilmi≈ü versiya*\n\n"
            
            from collections import defaultdict
            by_date = defaultdict(list)
            for r in reports_data:
                by_date[r['date'].strftime('%d.%m.%Y')].append(r)
            
            report += "**üìÖ TARƒ∞XL∆èR∆è G√ñR∆è HESABATLAR:**\n\n"
            for date, day_reports in sorted(by_date.items()):
                report += f"*{date}:*\n"
                for r in day_reports:
                    user_name = f"{r['first_name']} {r['last_name']}"
                    if r['has_tasks']:
                        report += f"‚Ä¢ **{user_name}**: {r['report_text']}\n"
                    else:
                        report += f"‚Ä¢ **{user_name}**: Tap≈üƒ±rƒ±q olmayƒ±b\n"
                report += "\n"
            
            total = len(reports_data)
            with_tasks = sum(1 for r in reports_data if r['has_tasks'])
            
            report += "**üìà STATƒ∞STƒ∞KA:**\n"
            report += f"‚Ä¢ C…ômi hesabat: {total}\n"
            report += f"‚Ä¢ Tap≈üƒ±rƒ±qlarla: {with_tasks}\n"
            report += f"‚Ä¢ Tap≈üƒ±rƒ±qsƒ±z: {total - with_tasks}\n"
        
        return report


deepseek_service = DeepSeekService()