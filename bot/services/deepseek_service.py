"""
–°–µ—Ä–≤–∏—Å DeepSeek AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
"""
import httpx
from typing import List, Dict
from loguru import logger
from config.settings import settings


class DeepSeekService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å DeepSeek API"""
    
    def __init__(self):
        self.api_key = settings.deepseek_api_key
        self.api_url = settings.deepseek_api_url
        self.timeout = 60.0  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    async def generate_weekly_report(
        self,
        reports_data: List[Dict],
        language: str = "ru"
    ) -> str:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
        
        Args:
            reports_data: –°–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            language: –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞ (ru –∏–ª–∏ az)
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            prompt = self._create_weekly_report_prompt(reports_data, language)
            
            # –í—ã–∑—ã–≤–∞–µ–º DeepSeek API
            response_text = await self._call_deepseek_api(prompt)
            
            return response_text
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return self._generate_fallback_report(reports_data, language)
    
    def _create_weekly_report_prompt(
        self,
        reports_data: List[Dict],
        language: str
    ) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–æ–≤
        reports_text = ""
        for report in reports_data:
            date_str = report['date'].strftime("%Y-%m-%d")
            user_name = f"{report['first_name']} {report['last_name']}"
            
            reports_text += f"\n{date_str} - {user_name}:\n"
            if report['has_tasks']:
                reports_text += f"{report['report_text']}\n"
            else:
                no_tasks_text = "–ó–∞–¥–∞—á –Ω–µ –±—ã–ª–æ" if language == "ru" else "Tap≈üƒ±rƒ±q olmayƒ±b"
                reports_text += f"{no_tasks_text}\n"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        if language == "ru":
            prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
{reports_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç—á–µ—Ç—É:
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
2. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
3. –°–≥—Ä—É–ø–ø–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
4. –£–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
5. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
6. –û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
7. –ò—Å–ø–æ–ª—å–∑—É–π emoji –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–æ–±–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º."""
        else:
            prompt = f"""S…ôn pe≈ü…ôkar analitiksan. ƒ∞≈ü√ßil…ôrin g√ºnd…ôlik hesabatlarƒ± …ôsasƒ±nda h…ôft…ôlik komanda i≈üi haqqƒ±nda …ôtraflƒ± v…ô strukturla≈üdƒ±rƒ±lmƒ±≈ü hesabat yarat.

ƒ∞lkin m…ôlumatlar:
{reports_text}

Hesabat t…ôl…ôbl…ôri:
1. M…ôlumatƒ± h…ôft…ônin g√ºnl…ôrin…ô g√∂r…ô strukturla≈üdƒ±r
2. Komandanƒ±n …ôsas nailiyy…ôtl…ôrini vurƒüula
3. Tap≈üƒ±rƒ±qlarƒ± kateqoriyalara g√∂r…ô qrupla≈üdƒ±r (m√ºmk√ºns…ô)
4. √úmumi statistika g√∂st…ôr (yerin…ô yetirilmi≈ü tap≈üƒ±rƒ±qlarƒ±n sayƒ±, i≈ü√ßil…ôrin aktivliyi)
5. Pe≈ü…ôkar √ºslubda t…ôqdim et
6. Hesabat Az…ôrbaycan dilind…ô olmalƒ±dƒ±r
7. Daha yax≈üƒ± oxunaqlƒ±lƒ±q √º√ß√ºn emoji istifad…ô et

Hesabat formatƒ± r…ôhb…ôrlik t…ôr…ôfind…ôn oxumaq √º√ß√ºn rahat olmalƒ±dƒ±r."""
        
        return prompt
    
    async def _call_deepseek_api(self, prompt: str) -> str:
        """–í—ã–∑–≤–∞—Ç—å DeepSeek API"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.7,  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            "max_tokens": 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
        }
        
        async with httpx.AsyncClient(timeout=self.timeout) as client:
            try:
                response = await client.post(
                    self.api_url,
                    headers=headers,
                    json=data
                )
                response.raise_for_status()
                
                result = response.json()
                return result['choices'][0]['message']['content']
            
            except httpx.HTTPError as e:
                logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DeepSeek API: {e}")
                raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ DeepSeek API: {e}")
                raise
    
    def _generate_fallback_report(
        self,
        reports_data: List[Dict],
        language: str
    ) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        
        if language == "ru":
            report = "üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢\n\n"
            report += f"–ü–µ—Ä–∏–æ–¥: –Ω–µ–¥–µ–ª—è —Å {reports_data[0]['date'].strftime('%d.%m.%Y')} "
            report += f"–ø–æ {reports_data[-1]['date'].strftime('%d.%m.%Y')}\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            from collections import defaultdict
            by_date = defaultdict(list)
            for r in reports_data:
                by_date[r['date'].strftime('%d.%m.%Y')].append(r)
            
            for date, day_reports in sorted(by_date.items()):
                report += f"üìÖ {date}:\n"
                for r in day_reports:
                    user_name = f"{r['first_name']} {r['last_name']}"
                    if r['has_tasks']:
                        report += f"  ‚Ä¢ {user_name}: {r['report_text']}\n"
                    else:
                        report += f"  ‚Ä¢ {user_name}: –ó–∞–¥–∞—á –Ω–µ –±—ã–ª–æ\n"
                report += "\n"
        else:
            report = "üìä H∆èFT∆èLƒ∞K HESABAT\n\n"
            report += f"D√∂vr: {reports_data[0]['date'].strftime('%d.%m.%Y')} - "
            report += f"{reports_data[-1]['date'].strftime('%d.%m.%Y')} h…ôft…ôsi\n\n"
            
            from collections import defaultdict
            by_date = defaultdict(list)
            for r in reports_data:
                by_date[r['date'].strftime('%d.%m.%Y')].append(r)
            
            for date, day_reports in sorted(by_date.items()):
                report += f"üìÖ {date}:\n"
                for r in day_reports:
                    user_name = f"{r['first_name']} {r['last_name']}"
                    if r['has_tasks']:
                        report += f"  ‚Ä¢ {user_name}: {r['report_text']}\n"
                    else:
                        report += f"  ‚Ä¢ {user_name}: Tap≈üƒ±rƒ±q olmayƒ±b\n"
                report += "\n"
        
        return report


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ DeepSeek
deepseek_service = DeepSeekService()