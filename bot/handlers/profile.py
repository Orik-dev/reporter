"""
–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import re
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from bot.states import EditProfileStates
from bot.keyboards import (
    get_edit_profile_keyboard,
    get_language_keyboard,
    get_work_time_keyboard,
)
from bot.utils import get_text
from bot.database import User, UserRepository
from bot.filters import IsRegisteredFilter

router = Router()


# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∞–∫–∞—è –∂–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∫ –≤ start.py
def _bad_name(s: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏"""
    if not s or not s.strip():
        return True
    
    s = s.strip()
    
    if len(s) < 2 or len(s) > 50:
        return True
    
    if s.startswith("/"):
        return True
    
    banned = {
        "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", "‚ùì –ü–æ–º–æ—â—å", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        "üë§ M…ônim profilim", "üìä Hesabat g√∂nd…ôr", "‚ùì K√∂m…ôk", "‚öôÔ∏è Admin panel",
    }
    if s in banned:
        return True
    
    pattern = r"^[a-zA-Z–ê-–Ø–∞-—è–Å—ë∆è…ôƒ∞ƒ±√ñ√∂√ú√ºƒûƒü≈û≈ü√á√ß\s'\-]+$"
    if not re.match(pattern, s):
        return True
    
    if not re.search(r"[a-zA-Z–ê-–Ø–∞-—è–Å—ë∆è…ôƒ∞ƒ±√ñ√∂√ú√ºƒûƒü≈û≈ü√á√ß]", s):
        return True
    
    return False


@router.message(Command("profile"), IsRegisteredFilter())
@router.message(F.text.in_(["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üë§ M…ônim profilim"]), IsRegisteredFilter())
async def cmd_profile(message: Message, user: User, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        await state.clear()
        text = get_text("profile_info", user.language,
                        first_name=user.first_name, last_name=user.last_name, work_time=user.work_time)
        await message.answer(text, reply_markup=get_edit_profile_keyboard(user.language))
        logger.info(f"profile shown tg={user.telegram_id}")
    except Exception as e:
        logger.error(f"profile error: {e}")
        await message.answer(get_text("error", user.language))


@router.callback_query(F.data == "edit_first_name")
async def edit_first_name_start(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    try:
        await callback.answer()
        text = get_text("enter_first_name", user.language)
        await callback.message.edit_text(text)
        await state.set_state(EditProfileStates.edit_first_name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.message(EditProfileStates.edit_first_name, F.text)
async def edit_first_name_process(
    message: Message,
    state: FSMContext,
    user: User,
    session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    try:
        first_name = message.text.strip()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if _bad_name(first_name):
            await message.answer(get_text("invalid_name", user.language))
            return
        
        await UserRepository.update(
            session,
            user.telegram_id,
            first_name=first_name
        )
        
        await state.clear()
        
        text = get_text("profile_updated", user.language)
        await message.answer(text)
        
        updated_user = await UserRepository.get_by_telegram_id(session, user.telegram_id)
        profile_text = get_text(
            "profile_info",
            updated_user.language,
            first_name=updated_user.first_name,
            last_name=updated_user.last_name,
            work_time=updated_user.work_time
        )
        keyboard = get_edit_profile_keyboard(updated_user.language)
        
        await message.answer(profile_text, reply_markup=keyboard)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ–±–Ω–æ–≤–∏–ª –∏–º—è")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: {e}")
        await message.answer(get_text("error", user.language))


@router.callback_query(F.data == "edit_last_name")
async def edit_last_name_start(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏"""
    try:
        await callback.answer()
        text = get_text("enter_last_name", user.language)
        await callback.message.edit_text(text)
        await state.set_state(EditProfileStates.edit_last_name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.message(EditProfileStates.edit_last_name, F.text)
async def edit_last_name_process(
    message: Message,
    state: FSMContext,
    user: User,
    session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏"""
    try:
        last_name = message.text.strip()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if _bad_name(last_name):
            await message.answer(get_text("invalid_last_name", user.language))
            return
        
        await UserRepository.update(
            session,
            user.telegram_id,
            last_name=last_name
        )
        
        await state.clear()
        
        text = get_text("profile_updated", user.language)
        await message.answer(text)
        
        updated_user = await UserRepository.get_by_telegram_id(session, user.telegram_id)
        profile_text = get_text(
            "profile_info",
            updated_user.language,
            first_name=updated_user.first_name,
            last_name=updated_user.last_name,
            work_time=updated_user.work_time
        )
        keyboard = get_edit_profile_keyboard(updated_user.language)
        
        await message.answer(profile_text, reply_markup=keyboard)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ–±–Ω–æ–≤–∏–ª —Ñ–∞–º–∏–ª–∏—é")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏: {e}")
        await message.answer(get_text("error", user.language))


@router.callback_query(F.data == "edit_work_time")
async def edit_work_time_start(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        await callback.answer()
        text = get_text("select_work_time", user.language)
        keyboard = get_work_time_keyboard(user.language)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(EditProfileStates.edit_work_time)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.callback_query(F.data.startswith("work_time_"), EditProfileStates.edit_work_time)
async def edit_work_time_process(
    callback: CallbackQuery,
    state: FSMContext,
    user: User,
    session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        work_time_code = callback.data.split("_", 2)[2]
        
        work_time_map = {
            "9-18": "9:00-18:00",
            "10-19": "10:00-19:00"
        }
        work_time = work_time_map.get(work_time_code, "9:00-18:00")
        
        await UserRepository.update(
            session,
            user.telegram_id,
            work_time=work_time
        )
        
        await callback.answer()
        await state.clear()
        
        text = get_text("profile_updated", user.language)
        await callback.message.edit_text(text)
        
        updated_user = await UserRepository.get_by_telegram_id(session, user.telegram_id)
        profile_text = get_text(
            "profile_info",
            updated_user.language,
            first_name=updated_user.first_name,
            last_name=updated_user.last_name,
            work_time=updated_user.work_time
        )
        keyboard = get_edit_profile_keyboard(updated_user.language)
        
        await callback.message.answer(profile_text, reply_markup=keyboard)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞ {work_time}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.callback_query(F.data == "edit_language")
async def edit_language_start(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞"""
    try:
        await callback.answer()
        text = get_text("welcome", user.language)
        keyboard = get_language_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(EditProfileStates.edit_language)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.callback_query(F.data.startswith("lang_"), EditProfileStates.edit_language)
async def edit_language_process(
    callback: CallbackQuery,
    state: FSMContext,
    user: User,
    session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞"""
    try:
        language = callback.data.split("_")[1]
        
        await UserRepository.update(
            session,
            user.telegram_id,
            language=language
        )
        
        await callback.answer()
        await state.clear()
        
        text = get_text("profile_updated", language)
        await callback.message.edit_text(text)
        
        updated_user = await UserRepository.get_by_telegram_id(session, user.telegram_id)
        profile_text = get_text(
            "profile_info",
            updated_user.language,
            first_name=updated_user.first_name,
            last_name=updated_user.last_name,
            work_time=updated_user.work_time
        )
        keyboard = get_edit_profile_keyboard(updated_user.language)
        
        await callback.message.answer(profile_text, reply_markup=keyboard)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ–±–Ω–æ–≤–∏–ª —è–∑—ã–∫ –Ω–∞ {language}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext, user: User):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        await callback.answer()
        text = get_text("help_text", user.language)
        await callback.message.edit_text(text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)