"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã)
"""
from datetime import date, datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from bot.keyboards import get_admin_keyboard
from bot.utils import get_text, format_answer
from bot.database import User, UserRepository, DailyReportRepository
from bot.filters import IsAdminFilter, IsNotAdminFilter
from bot.services import deepseek_service, document_service
from bot.services.scheduler_service import SchedulerService

router = Router()

# ‚úÖ –ù–û–í–û–ï: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
generating_reports = {}  # {admin_id: datetime}


@router.message(Command("admin"), IsAdminFilter())
@router.message(F.text.in_(["‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚öôÔ∏è Admin panel"]), IsAdminFilter())
async def cmd_admin(message: Message, user: User):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        text = get_text("admin_panel", user.language if user else "ru")
        keyboard = get_admin_keyboard(user.language if user else "ru")
        
        await message.answer(text, reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ admin: {e}")
        await message.answer(get_text("error", user.language if user else "ru"))


@router.message(Command("admin"), IsNotAdminFilter())
@router.message(F.text.in_(["‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚öôÔ∏è Admin panel"]), IsNotAdminFilter())
async def cmd_admin_not_authorized(message: Message, user: User):
    """–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø—Ä–∞–≤"""
    try:
        text = get_text("not_authorized", user.language if user else "ru")
        await message.answer(text)
        
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–µ–∑ –ø—Ä–∞–≤")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin not authorized: {e}")


@router.callback_query(F.data == "admin_stats", IsAdminFilter())
async def admin_stats(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        all_users = await UserRepository.get_all_active(session)
        total_users = len(all_users)
        
        today = date.today()
        start_date = datetime.combine(today, datetime.min.time())
        end_date = datetime.combine(today, datetime.max.time())
        today_reports = await DailyReportRepository.get_reports_by_date_range(
            session,
            start_date,
            end_date
        )
        
        week_start = today - timedelta(days=today.weekday())
        week_start_date = datetime.combine(week_start, datetime.min.time())
        week_reports = await DailyReportRepository.get_reports_by_date_range(
            session,
            week_start_date,
            end_date
        )
        
        text = get_text(
            "stats",
            user.language if user else "ru",
            total_users=total_users,
            active_users=total_users,
            today_reports=len(today_reports),
            week_reports=len(week_reports)
        )
        
        await callback.message.edit_text(text)
        await callback.answer()
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer(get_text("error", user.language if user else "ru"), show_alert=True)


@router.callback_query(F.data == "admin_users", IsAdminFilter())
async def admin_users(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users = await UserRepository.get_all_active(session)
        
        users_text = ""
        for u in users:
            admin_badge = " üëë" if u.is_admin else ""
            users_text += f"‚Ä¢ {u.first_name} {u.last_name} ({u.work_time}){admin_badge}\n"
        
        text = get_text(
            "user_list",
            user.language if user else "ru",
            count=len(users),
            users=users_text
        )
        
        await callback.message.edit_text(text)
        await callback.answer()
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer(get_text("error", user.language if user else "ru"), show_alert=True)


@router.callback_query(F.data == "admin_daily_reports", IsAdminFilter())
async def admin_daily_reports(callback: CallbackQuery, user: User, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        today = date.today()
        start_date = datetime.combine(today, datetime.min.time())
        end_date = datetime.combine(today, datetime.max.time())
        
        users = await UserRepository.get_all_active(session)
        reports = await DailyReportRepository.get_reports_by_date_range(
            session,
            start_date,
            end_date
        )
        
        total_users = len(users)
        submitted_reports = len(reports)
        no_tasks_count = sum(1 for r in reports if not r.has_tasks)
        not_submitted = total_users - submitted_reports
        
        details = "üë• –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ / T…ôf…ôrr√ºatlar:\n\n"
        
        details += "‚úÖ –° –∑–∞–¥–∞—á–∞–º–∏ / Tap≈üƒ±rƒ±qlarla:\n"
        for report in reports:
            if report.has_tasks:
                u = next((user for user in users if user.telegram_id == report.telegram_id), None)
                if u:
                    details += f"  ‚Ä¢ {u.first_name} {u.last_name}\n"
        
        if no_tasks_count > 0:
            details += "\nüö´ –ë–µ–∑ –∑–∞–¥–∞—á / Tap≈üƒ±rƒ±qsƒ±z:\n"
            for report in reports:
                if not report.has_tasks:
                    u = next((user for user in users if user.telegram_id == report.telegram_id), None)
                    if u:
                        details += f"  ‚Ä¢ {u.first_name} {u.last_name}\n"
        
        if not_submitted > 0:
            details += "\n‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ / G√∂nd…ôrm…ôdi:\n"
            submitted_ids = {r.telegram_id for r in reports}
            for u in users:
                if u.telegram_id not in submitted_ids:
                    details += f"  ‚Ä¢ {u.first_name} {u.last_name}\n"
        
        text = get_text(
            "daily_report_summary",
            user.language if user else "ru",
            date=today.strftime("%d.%m.%Y"),
            total=total_users,
            submitted=submitted_reports,
            not_submitted=not_submitted,
            no_tasks=no_tasks_count,
            details=details
        )
        
        await callback.message.edit_text(text)
        await callback.answer()
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await callback.answer(get_text("error", user.language if user else "ru"), show_alert=True)


@router.callback_query(F.data == "admin_weekly_report", IsAdminFilter())
async def admin_weekly_report(callback: CallbackQuery, user: User, session: AsyncSession):
    """
    ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    try:
        admin_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç
        if admin_id in generating_reports:
            time_diff = (datetime.now() - generating_reports[admin_id]).total_seconds()
            if time_diff < 120:
                await callback.answer(
                    "‚è≥ –û—Ç—á–µ—Ç —É–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"
                    "Hesabat artƒ±q hazƒ±rlanƒ±r, g√∂zl…ôyin..." if user.language == "az" else 
                    "‚è≥ –û—Ç—á–µ—Ç —É–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                    show_alert=True
                )
                return
            else:
                del generating_reports[admin_id]
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generating_reports[admin_id] = datetime.now()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —è–∑—ã–∫–µ –∞–¥–º–∏–Ω–∞
        loading_text = (
            "‚è≥ H…ôft…ôlik hesabat hazƒ±rlanƒ±r...\nBu 1 d…ôqiq…ôy…ô q…ôd…ôr √ß…ôk…ô bil…ôr."
            if user.language == "az" else
            "‚è≥ –§–æ—Ä–º–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã."
        )
        loading_msg = await callback.message.answer(loading_text)
        await callback.answer()
        
        today = date.today()
        week_start = today - timedelta(days=today.weekday())
        week_end = today
        
        start_datetime = datetime.combine(week_start, datetime.min.time())
        end_datetime = datetime.combine(week_end, datetime.max.time())
        
        reports = await DailyReportRepository.get_reports_by_date_range(
            session,
            start_datetime,
            end_datetime
        )
        
        if not reports:
            del generating_reports[admin_id]
            await loading_msg.delete()
            no_data_text = (
                "üì≠ Bu h…ôft…ô hesabat yoxdur"
                if user.language == "az" else
                "üì≠ –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            )
            await callback.message.answer(no_data_text)
            return
        
        users = await UserRepository.get_all_active(session)
        user_dict = {u.telegram_id: u for u in users}
        
        reports_data = []
        for report in reports:
            u = user_dict.get(report.telegram_id)
            if u:
                reports_data.append({
                    'date': report.report_date,
                    'first_name': u.first_name,
                    'last_name': u.last_name,
                    'report_text': report.report_text,
                    'has_tasks': report.has_tasks
                })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å AI
        report_text = await deepseek_service.generate_weekly_report(
            reports_data,
            language=user.language
        )
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        formatted_text = format_answer(report_text)
        
        week_start_str = week_start.strftime("%d.%m.%Y")
        week_end_str = week_end.strftime("%d.%m.%Y")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        docx_file = document_service.generate_docx(
            report_text,
            week_start_str,
            week_end_str
        )
        
        pdf_file = document_service.generate_pdf(
            report_text,
            week_start_str,
            week_end_str
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –∞–¥–º–∏–Ω–∞
        header = get_text("weekly_report_header", user.language, 
                         week_start=week_start_str, week_end=week_end_str)
        
        await callback.message.answer(
            f"{header}\n\n{formatted_text}",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DOCX
        await callback.message.answer_document(
            document=BufferedInputFile(
                docx_file.read(),
                filename=f"weekly_report_{week_start_str}_{week_end_str}.docx"
            ),
            caption="üìÑ DOCX –≤–µ—Ä—Å–∏—è –æ—Ç—á–µ—Ç–∞" if user.language == "ru" else "üìÑ Hesabatƒ±n DOCX versiyasƒ±"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        pdf_file.seek(0)
        await callback.message.answer_document(
            document=BufferedInputFile(
                pdf_file.read(),
                filename=f"weekly_report_{week_start_str}_{week_end_str}.pdf"
            ),
            caption="üìÑ PDF –≤–µ—Ä—Å–∏—è –æ—Ç—á–µ—Ç–∞" if user.language == "ru" else "üìÑ Hesabatƒ±n PDF versiyasƒ±"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ generating_reports
        del generating_reports[admin_id]
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        
        if callback.from_user.id in generating_reports:
            del generating_reports[callback.from_user.id]
        
        await callback.message.answer(get_text("error", user.language if user else "ru"))


@router.message(Command("debug_notify"), IsAdminFilter())
async def debug_notify(message: Message, user: User):
    """DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        from aiogram import Bot
        bot: Bot = message.bot
        sched = SchedulerService(bot)
        await sched._send_daily_notifications("9:00-18:00")
        await sched._send_daily_notifications("10:00-19:00")
        await sched._send_hourly_reminders()
        await message.answer("‚úÖ debug_notify: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"‚ùå debug_notify –æ—à–∏–±–∫–∞: {e}")


@router.message(Command("debug_admin_daily"), IsAdminFilter())
async def debug_admin_daily(message: Message, user: User):
    """DEBUG: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É"""
    try:
        from aiogram import Bot
        bot: Bot = message.bot
        sched = SchedulerService(bot)
        await sched._send_daily_admin_report()
        await message.answer("‚úÖ admin daily sent")
    except Exception as e:
        await message.answer(f"‚ùå admin daily error: {e}")


@router.message(Command("debug_weekly"), IsAdminFilter())
async def debug_weekly(message: Message, user: User):
    """DEBUG: –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    try:
        from aiogram import Bot
        bot: Bot = message.bot
        sched = SchedulerService(bot)
        await sched._send_weekly_report()
        await message.answer("‚úÖ weekly sent")
    except Exception as e:
        await message.answer(f"‚ùå weekly error: {e}")
