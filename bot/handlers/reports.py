# """
# –û—Ç—á–µ—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# """
# from aiogram import Router, F
# from aiogram.filters import Command
# from aiogram.types import Message, CallbackQuery
# from aiogram.fsm.context import FSMContext
# from sqlalchemy.ext.asyncio import AsyncSession
# from datetime import date, datetime
# from loguru import logger

# from bot.states import ReportStates
# from bot.keyboards import get_report_type_keyboard
# from bot.utils import get_text
# from bot.database import User, DailyReportRepository
# from bot.filters import IsRegisteredFilter

# router = Router()


# @router.message(Command("report"), IsRegisteredFilter())
# @router.message(F.text.in_(["üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", "üìä Hesabat g√∂nd…ôr"]), IsRegisteredFilter())
# async def cmd_report(message: Message, user: User, session: AsyncSession, state: FSMContext):
#     """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞"""
#     try:
#         await state.clear()
#         today = date.today()
#         existing = await DailyReportRepository.get_by_date(session, user.telegram_id, today)
#         if existing:
#             await message.answer(get_text("report_already_submitted", user.language))
#             return
#         await message.answer(get_text("report_type_select", user.language),
#                              reply_markup=get_report_type_keyboard(user.language))
#         await state.set_state(ReportStates.waiting_for_report)
#         logger.info(f"report started tg={user.telegram_id}")
#     except Exception as e:
#         logger.error(f"report start error: {e}")
#         await message.answer(get_text("error", user.language))


# @router.callback_query(F.data == "report_has_tasks", ReportStates.waiting_for_report)
# async def report_has_tasks(callback: CallbackQuery, state: FSMContext, user: User):
#     """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á—Ç–æ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏"""
#     try:
#         await callback.answer()
#         text = get_text("enter_report_text", user.language)
#         await callback.message.edit_text(text)
#         await state.update_data(has_tasks=True)
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –≤—ã–±—Ä–∞–ª '–µ—Å—Ç—å –∑–∞–¥–∞—á–∏'")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ report_has_tasks: {e}")
#         await callback.answer(get_text("error", user.language), show_alert=True)


# @router.callback_query(F.data == "report_no_tasks", ReportStates.waiting_for_report)
# async def report_no_tasks(
#     callback: CallbackQuery,
#     state: FSMContext,
#     user: User,
#     session: AsyncSession
# ):
#     """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á—Ç–æ –Ω–µ—Ç –∑–∞–¥–∞—á"""
#     try:
#         today = datetime.now()
        
#         await DailyReportRepository.create(
#             session=session,
#             user_id=user.id,
#             telegram_id=user.telegram_id,
#             report_date=today,
#             report_text=None,
#             has_tasks=False
#         )
        
#         await callback.answer()
#         await state.clear()
        
#         text = get_text("report_no_tasks", user.language)
#         await callback.message.edit_text(text)
        
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —Å–æ–æ–±—â–∏–ª –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á")
    
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ report_no_tasks: {e}")
#         await callback.answer(get_text("error", user.language), show_alert=True)


# @router.message(ReportStates.waiting_for_report, F.text)
# async def receive_report_text(
#     message: Message,
#     state: FSMContext,
#     user: User,
#     session: AsyncSession
# ):
#     """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞"""
#     try:
#         data = await state.get_data()
#         has_tasks = data.get('has_tasks', True)
        
#         if not has_tasks:
#             await message.answer(get_text("invalid_input", user.language))
#             return
        
#         report_text = message.text.strip()
        
#         # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–µ –ø—É—Å—Ç–æ–π
#         if not report_text:
#             await message.answer(get_text("report_empty", user.language))
#             return
        
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤
#         if len(report_text) < 10:
#             await message.answer(get_text("report_too_short", user.language))
#             return
        
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
#         if not report_text.replace('\n', '').replace(' ', ''):
#             await message.answer(get_text("report_empty", user.language))
#             return
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
#         today = datetime.now()
        
#         await DailyReportRepository.create(
#             session=session,
#             user_id=user.id,
#             telegram_id=user.telegram_id,
#             report_date=today,
#             report_text=report_text,
#             has_tasks=True
#         )
        
#         await state.clear()
        
#         text = get_text("report_submitted", user.language)
#         await message.answer(text)
        
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç")
    
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
#         await message.answer(get_text("error", user.language))


"""
–û—Ç—á–µ—Ç—ã - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import date, datetime
from loguru import logger

from bot.states import ReportStates
from bot.keyboards import get_report_type_keyboard, get_cancel_report_keyboard
from bot.utils import get_text
from bot.database import User, DailyReportRepository
from bot.filters import IsRegisteredFilter

router = Router()


@router.message(Command("report"), IsRegisteredFilter())
@router.message(F.text.in_(["üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", "üìä Hesabat g√∂nd…ôr"]), IsRegisteredFilter())
async def cmd_report(message: Message, user: User, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞"""
    try:
        await state.clear()
        today = date.today()
        existing = await DailyReportRepository.get_by_date(session, user.telegram_id, today)
        if existing:
            await message.answer(get_text("report_already_submitted", user.language))
            return
        await message.answer(get_text("report_type_select", user.language),
                             reply_markup=get_report_type_keyboard(user.language))
        await state.set_state(ReportStates.waiting_for_report)
        logger.info(f"report started tg={user.telegram_id}")
    except Exception as e:
        logger.error(f"report start error: {e}")
        await message.answer(get_text("error", user.language))


@router.callback_query(F.data == "report_has_tasks", ReportStates.waiting_for_report)
async def report_has_tasks(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á—Ç–æ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏"""
    try:
        await callback.answer()
        text = get_text("enter_report_text", user.language)
        # ‚úÖ –ù–û–í–û–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard = get_cancel_report_keyboard(user.language)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.update_data(has_tasks=True)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –≤—ã–±—Ä–∞–ª '–µ—Å—Ç—å –∑–∞–¥–∞—á–∏'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ report_has_tasks: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.callback_query(F.data == "report_no_tasks", ReportStates.waiting_for_report)
async def report_no_tasks(
    callback: CallbackQuery,
    state: FSMContext,
    user: User,
    session: AsyncSession
):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á—Ç–æ –Ω–µ—Ç –∑–∞–¥–∞—á"""
    try:
        today = datetime.now()
        
        await DailyReportRepository.create(
            session=session,
            user_id=user.id,
            telegram_id=user.telegram_id,
            report_date=today,
            report_text=None,
            has_tasks=False
        )
        
        await callback.answer()
        await state.clear()
        
        text = get_text("report_no_tasks", user.language)
        await callback.message.edit_text(text)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —Å–æ–æ–±—â–∏–ª –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ report_no_tasks: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


# ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞"
@router.callback_query(F.data == "cancel_report", ReportStates.waiting_for_report)
async def cancel_report(callback: CallbackQuery, state: FSMContext, user: User):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞"""
    try:
        await state.clear()
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ / L…ôƒüv edildi")
        
        text = get_text("report_cancelled", user.language)
        await callback.message.edit_text(text)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.answer(get_text("error", user.language), show_alert=True)


@router.message(ReportStates.waiting_for_report, F.text)
async def receive_report_text(
    message: Message,
    state: FSMContext,
    user: User,
    session: AsyncSession
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞"""
    try:
        data = await state.get_data()
        has_tasks = data.get('has_tasks', True)
        
        if not has_tasks:
            await message.answer(get_text("invalid_input", user.language))
            return
        
        report_text = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not report_text:
            await message.answer(get_text("report_empty", user.language))
            return
        
        if len(report_text) < 10:
            await message.answer(get_text("report_too_short", user.language))
            return
        
        if not report_text.replace('\n', '').replace(' ', ''):
            await message.answer(get_text("report_empty", user.language))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        today = datetime.now()
        
        await DailyReportRepository.create(
            session=session,
            user_id=user.id,
            telegram_id=user.telegram_id,
            report_date=today,
            report_text=report_text,
            has_tasks=True
        )
        
        await state.clear()
        
        text = get_text("report_submitted", user.language)
        await message.answer(text)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer(get_text("error", user.language))